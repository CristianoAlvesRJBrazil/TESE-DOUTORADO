# Explorar a estrutura real dos dados
print("=== EXPLORANDO ESTRUTURA DOS DADOS ===")

import os
import glob
import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt

def explorar_estrutura():
    base_dir = '/content/brats2020'
    
    if not os.path.exists(base_dir):
        print("❌ Diretório brats2020 não encontrado!")
        return None
    
    print("📂 Estrutura encontrada:")
    print("=" * 50)
    
    for item in os.listdir(base_dir):
        item_path = os.path.join(base_dir, item)
        if os.path.isdir(item_path):
            print(f"📁 {item}/")
            # Mostrar primeiros 3 itens dentro de cada diretório
            for subitem in os.listdir(item_path)[:3]:
                subitem_path = os.path.join(item_path, subitem)
                if os.path.isdir(subitem_path):
                    print(f"   └── 📁 {subitem}/")
                    # Mostrar arquivos dentro do caso
                    files = os.listdir(subitem_path)
                    for file in files[:2]:
                        print(f"        └── 📄 {file}")
                else:
                    print(f"   └── 📄 {subitem}")
        else:
            print(f"📄 {item}")
    
    return base_dir

base_dir = explorar_estrutura()

# Método 2: Busca automática por qualquer arquivo .nii.gz
print("\n=== MÉTODO 2: BUSCA AUTOMÁTICA ===")

def busca_automatica():
    # Buscar todos os arquivos .nii.gz
    arquivos_nii = glob.glob('/content/brats2020/**/*.nii.gz', recursive=True)
    arquivos_nii += glob.glob('/content/brats2020/**/*.nii', recursive=True)
    
    print(f"📊 Total de arquivos .nii encontrados: {len(arquivos_nii)}")
    
    if not arquivos_nii:
        print("❌ Nenhum arquivo .nii encontrado!")
        return None
    
    # Mostrar primeiros 10 arquivos
    print("\n📋 Primeiros 10 arquivos encontrados:")
    for i, arquivo in enumerate(arquivos_nii[:10]):
        print(f"  {i+1}. {os.path.basename(arquivo)}")
        print(f"     📁 {os.path.dirname(arquivo)}")
    
    # Pegar o primeiro arquivo FLAIR encontrado
    arquivo_flair = None
    for arquivo in arquivos_nii:
        if 'flair' in arquivo.lower():
            arquivo_flair = arquivo
            break
    
    if arquivo_flair:
        print(f"\n🎯 Usando arquivo FLAIR: {os.path.basename(arquivo_flair)}")
        
        # Carregar e mostrar
        img = nib.load(arquivo_flair)
        data = img.get_fdata()
        
        print(f"📐 Dimensões: {data.shape}")
        print(f"📊 Estatísticas: min={data.min():.1f}, max={data.max():.1f}, mean={data.mean():.1f}")
        
        # Visualização rápida
        plt.figure(figsize=(10, 5))
        plt.imshow(data[:, :, data.shape[2]//2], cmap='gray')
        plt.title(f"FLAIR - {os.path.basename(arquivo_flair)}\nShape: {data.shape}")
        plt.axis('off')
        plt.colorbar()
        plt.show()
        
        return data
    else:
        print("❌ Nenhum arquivo FLAIR encontrado!")
        return None

# Executar método 2
imagem_exemplo = busca_automatica()

